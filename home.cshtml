@using System.Data.SqlClient;
@using System.Configuration;
@{
    Page.Title = "Home";
    Layout = "~/Shared/_BasicLayout.cshtml";
    bool threadForm = false;
    List<Thread> selectedData = new List<Thread>();

    <!--Gets a list of all threads in the database when the home page is initialized-->
    string cstr = ConfigurationManager.ConnectionStrings["ConString"].ConnectionString;

    using (SqlConnection con = new SqlConnection(cstr))
    {
        con.Open();

        string query = "SELECT * FROM tblThread";

        using (SqlCommand cmd = new SqlCommand(query, con))
        {
            using (SqlDataReader rdr = cmd.ExecuteReader())
            {
                while (rdr.Read())
                {
                    selectedData.Add(new Thread
                    {
                        Id = Convert.ToInt32(rdr["threadId"]),
                        Title = rdr["threadTitle"].ToString(),
                        Size = Convert.ToInt32(rdr["threadSize"]),
                        UserId = Convert.ToInt32(rdr["userId"]),
                        Content = rdr["threadContent"].ToString(),
                        Date = Convert.ToDateTime(rdr["threadDate"]),
                        ImageFile = rdr["threadImage"].ToString()
                    });
                }
            }
        }
        con.Close();
    }


    if (Request.Form["threadSubmit"] != null)
    {
        threadForm = true;
    }
    if(Request.Form["threadCancel"] != null)
    {
        threadForm = false;
    }

    <!--Validates the thread form and, if valid, creates a new thread in the database-->
    if(Request.Form["createThreadSubmit"] != null)
    {
        Validation.RequireField("title", "Title is required");
        Validation.RequireField("description", "Thread Description is required");

        if (Validation.IsValid())
        {
            var title = Request.Form["title"];
            var description = Request.Form["description"];
            var id = Convert.ToInt32(Session["id"]);

            string savedFileName = null;
            var file = Request.Files["chooseFile"];

            //check file was submitted
            if (file != null && file.ContentLength > 0)
            {
                //generates a Guid for the new filename to ensure unique naming (at least on this scale)
                string fileSeed = Guid.NewGuid().ToString("N");
                string fname = Path.GetFileName(file.FileName);
                string extension = Path.GetExtension(file.FileName);
                savedFileName = fileSeed + extension;

                file.SaveAs(Server.MapPath(Path.Combine("~/Images/ThreadImages/", savedFileName)));
            }

            cstr = ConfigurationManager.ConnectionStrings["ConString"].ConnectionString;
            using (SqlConnection con = new SqlConnection(cstr))
            {
                con.Open();
                string query;
                <!--Different query strings for whether or not there is an image for the thread-->
                if (savedFileName != null)
                {

                    query = string.Format("INSERT INTO tblThread (userId, threadTitle, threadSize, threadDate, threadContent, threadImage) Values('{0}', @title, '{1}', '{2}', @content, '{3}')", id, 0, DateTime.Now, savedFileName);

                }
                else
                {
                    query = string.Format("INSERT INTO tblThread (userId, threadTitle, threadSize, threadDate, threadContent) Values('{0}', @title, '{1}', '{2}', @content)", id, 0, DateTime.Now);

                }

                using (SqlCommand cmd2 = new SqlCommand(query, con))
                {
                    //Using a parameterized query to prevent SQL Injection from inputs
                    var titleParam = new SqlParameter("title", System.Data.SqlDbType.NVarChar);
                    var contentParam = new SqlParameter("content", System.Data.SqlDbType.Text);
                    titleParam.Value = title;
                    contentParam.Value = description;
                    cmd2.Parameters.AddRange(new SqlParameter[] { titleParam, contentParam});

                    var result2 = cmd2.ExecuteScalar();
                }
                con.Close();
                Response.Redirect("~/home");

            }
        }

    }



}

<div>

    
    <div class="body">
        <h2>Current Discussions</h2>
        <!--If the user is logged in and the threadSubmit button has been clicked, displays a form for thread creation-->
        @if (Session["loggedIn"] != null && Session["loggedIn"].Equals(true))
        {
            <form method="post" enctype="multipart/form-data" style="text-align:left">
                <span class="error">@Html.ValidationSummary()</span>
                @if (threadForm)
                {

                    <table>
                        <tr>
                            <td>
                                Title:
                            </td>
                            <td>
                                <input type="text" name="title" />

                            </td>
                        </tr>
                        <tr>
                            <td>Post: </td>
                            <td>
                                <textarea rows="4" cols="50" name="description"></textarea>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                Image:
                            </td>
                            <td>
                                <input type="file" accept="image/png, image/jpeg" name="chooseFile" />
                            </td>
                        </tr>
                    </table>
                    <input id="btnCreateThread" type="Submit" class="btn btn-outline-success my-2 my-sm-0" name="createThreadSubmit" value="Submit" />
                    <button id="btnCancelThread" class="btn btn-outline-success my-2 my-sm-0" type="submit" name="threadCancel">Cancel</button>
                }
                else
                {
                    <div style="text-align:left">
                        <!--If the threadSubmit button has not been clicked, display the threadSubmit button-->
                        <button id="btnStartThread" class="btn btn-outline-success my-2 my-sm-0" type="submit" name="threadSubmit">Start New Thread</button>
                    </div>
                }

            </form>
        }

        <!--WebGrid Helper displays all threads currently in database-->
    @Helpers.DisplayThreads(selectedData)
    </div>
</div>